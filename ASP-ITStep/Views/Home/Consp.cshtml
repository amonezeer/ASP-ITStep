
@{
    ViewData["Title"] = "Конспект";
}

<div class="text-center">
    <h1 class="display-4">Конспект </h1>
</div>



<h1>Про Razor 01.07.2025</h1>
<p>
    Razor - технологія (рушій), метою якого є суміщення можливостей мови програмування та розмітки.
    Основу складає спеціальний символ &commat; який у HMTL замінюється сутністю &amp;commat;
</p>
<h5>Вирази(expressions)</h5>
<p>
    Вирази  - команди, що мають результат.У сенсі Razor цей результат підставляється у томі місці у якому згадується.
    Синтаксис : <code>&commat;(expression)</code>, наприклад, <code>&commat;(2+3) = @(2 + 3)</code>. У данному сенсі конструкцію
    <code>&commat;()</code> можна порівняти з оператором вивидення <code>print(expression)</code>
</p>
<h5>Інструкції(statements)</h5>
<p>
    Інструкціх не мають візуального результату( не виводяться ). Задаються за домопогою синтаксису <code>&commat;(Statements)</code>, а=наприклад <pre>&commat;{
    int x = 10;
    var rnd = new Random();
}
</pre>
</p>
@{
    int x = 10;
    var rnd = new Random();
}
<p>
    Скорочена форма виразів: <code>&commat;expression</code> дозволяється  якщо у виразі немає розділових знаків, як-то
    <code>&commat;x = @x</code>,
    <code>&commat;rnd.Next() = @rnd.Next()</code> , але
    <code>&commat;x+1 = @x+1</code>
</p>
<h5>Інструкції управління(Сontrol statements)</h5>
<p>
    Умовні та циклічні оператори : &commat;if, &commat;if{}else{}, &commat;switch{}, &commat;for, &commat;foreach, ...
</p>


<h1>Інверсія управління 03.07.2025</h1>

<p>
    Інверсія управління (Inversion od control, IoC) - архітектурний паттерн , який виділяє окремий компонент
    (контейнер\інжектор), до задач якого , належить управління життєвими циклами об'єктів проєкту.
    Можна сказати  , що замість використання конструкціі new Object, використовується залежності - змінні,
    що встановлюються контейнером при побудові об'єктів.
</p>

<p>
    Організація складається з кількох єтапів:
</p>
<ul>
    <li>Опис класів, що будуть спільними у проєкті - сервіси </li>
    <li>Реєстрація класів (типів) у контейнері із зазначенням виду життєвого циклу</li>
    <li>Декларація залежностей в інших классах (контроллерах) </li>
    <li>Запуск задачі Resolve для вирішення послідновності впровадження залежності (створення об'єктів)</li>
</ul>

<p>
    DIP (Dependency Inversion principle) - принцип з SOLID, який рекомендує створювати залежності від абстракціі
    максимального рівня. Висновок : сервіси описуться разом з інтерфейсами. Мінімальний новий сервіс - два елементи:
    інтерфейс та клас.
</p>

<p>
    DI - Dependency Injection - спосіб реалізації IoC шляхом передачі посилань на об'єкти служб (сервісів) до точок інжекції.
</p>


<h1>Робота з формами 05.07.2025</h1>
<p>
    Форми передають дані.Це значить , що оновлення сторінки (після надсилання форми) призведе до повторного надсилання даних.
    Те ж саме буде при поверненні до сторінки ( навігацією назад )
</p>
<p>
    Для практичного використання вжимається прийом "скидання даних", який полягає в тому , що оброблення даних відбувається у два етапи:
    1. Приймаюиться дані форми та надсилається редірект
    2. Повторний запит без параметрів відновлює збережені дані та обробляє їх
</p>
<pre>

    [Browser]      {FormData}        [Server]

     (form)---------------------------> | - *save*

                  302 Redirect          |    |              !Не надсилає HTML на запит з формою

        |<------------------------------ |
                                         | (no data) |
                                         |------------------------------->  Process

                    HTML                     |
<------------------------------------
</pre>
<p>
    Сесії ( серверні сесії) - механізм розрізнення запитів з можливістю збереження даних на боці сервера, що стосуються конкретного запиту.
    Сесії реалізуються засобами Cookie - HTTP сутностей , які автоматично пересилаються браузером після одержання їх від сервера.
</p>
<pre>
    [Browser]                              [Server]
    1й запит -----------------------------> включає сесію , створює її ID
                  Set-Cookie: x=10          передає цей ID на клієнта
*save<-------------------------------------
                    Cookie: x-10            перевіряє чи зареєстрована сесія з ID
    2й запит -----------------------------> якщо є, то відновлює її дані
</pre>

<style>
    body {
        line-height: 1.6;
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
        background-color: #f5f5f5;
        color: #333;
    }

    h1, h2, h3, h5 {
        color: #2c3e50;
        margin-top: 2em;
    }

    h1 {
        font-size: 2.5em;
        border-bottom: 2px solid red;
        padding-bottom: 10px;
    }

    h2 {
        font-size: 1.8em;
        border-left: 4px solid #3498db;
        padding-left: 10px;
    }

    h5 {
        font-size: 1.2em;
        color: darkgreen;
    }

    p, li {
        font-size: 1.1em;
        margin-bottom: 1em;
    }

    code, pre {
        background-color: #ecf0f1;
        padding: 5px;
        border-radius: 4px;
        font-family: 'Consolas', monospace;
    }

    pre {
        padding: 15px;
        overflow-x: auto;
    }

    ul {
        list-style-type: disc;
        margin-left: 20px;
    }

    .section {
        background-color: #fff;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
    }

    .text-center {
        text-align: center;
    }
</style>