@inject ASP_ITStep.Services.Time.ITimeService timeService
@{
    ViewData["Title"] = "IoC";
}

<div class="text-center">
    <h1 class="display-4">Інверсія управління <i class="fa-solid fa-jedi"></i></h1>
</div>

@ViewData["timestamp"] -- @timeService.GetHashCode();

<p>
    Інверсія управління (Inversion od control, IoC) - архітектурний паттерн , який виділяє окремий компонент
    (контейнер\інжектор), до задач якого , належить управління життєвими циклами об'єктів проєкту.
    Можна сказати  , що замість використання конструкціі new Object, використовується залежності - змінні, 
    що встановлюються контейнером при побудові об'єктів.
</p>

<p>
    Організація складається з кількох єтапів:
</p>
<ul>
    <li>Опис класів, що будуть спільними у проєкті - сервіси </li>
    <li>Реєстрація класів (типів) у контейнері із зазначенням виду життєвого циклу</li>
    <li>Декларація залежностей в інших классах (контроллерах) </li>
    <li>Запуск задачі Resolve для вирішення послідновності впровадження залежності (створення об'єктів)</li>
</ul>

<p>
    DIP (Dependency Inversion principle) - принцип з SOLID, який рекомендує створювати залежності від абстракціі
    максимального рівня. Висновок : сервіси описуться разом з інтерфейсами. Мінімальний новий сервіс - два елементи: 
    інтерфейс та клас. 
</p>

<p>
    DI - Dependency Injection - спосіб реалізації IoC шляхом передачі посилань на об'єкти служб (сервісів) до точок інжекції.
</p>
